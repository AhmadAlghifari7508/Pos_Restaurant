@model POSRestoran01.Models.ViewModels.HomeViewModels.OrderViewModel

<div class="h-full flex flex-col p-6">
    <!-- Order Number at Top - Left aligned with content on right -->
    <div class="mb-4 pb-3 border-b border-gray-200">
        <div class="flex items-center justify-between">
            <span class="text-base text-gray-600 font-medium">Order No:</span>
            <span class="font-bold text-lg text-gray-800">@Model.OrderNumber</span>
        </div>
    </div>

    <!-- Column Headers -->
    @if (Model.Items.Any())
    {
        <div class="mb-3 pb-2 border-b border-gray-100">
            <div class="grid grid-cols-12 gap-1 text-sm font-semibold text-gray-700">
                <div class="col-span-6">Item Menu</div>
                <div class="col-span-3 text-center">Jumlah</div>
                <div class="col-span-3 pl-2">Harga</div>
            </div>
        </div>
    }

    <!-- Order Items with fixed scrolling area -->
    <div class="flex-1 overflow-y-auto mb-2" style="max-height: calc(100vh - 380px);">
        @if (Model.Items.Any())
        {
            <div class="space-y-3">
                @foreach (var item in Model.Items)
                {
                    <div class="order-item bg-gray-50 rounded-lg p-3 border border-gray-200 @(item.HasDiscount ? "bg-red-50 border-red-200" : "")">
                        <!-- Main Item Row -->
                        <div class="grid grid-cols-12 gap-1">
                            <!-- Item Info with Image (6 columns) -->
                            <div class="col-span-6">
                                <div class="flex items-start space-x-2">
                                    <!-- Item Image -->
                                    <div class="w-10 h-10 bg-gray-200 rounded overflow-hidden flex-shrink-0">
                                        @if (!string.IsNullOrEmpty(item.ImagePath))
                                        {
                                            <img src="@item.ImagePath" alt="@item.ItemName" class="w-full h-full object-cover">
                                        }
                                        else
                                        {
                                            <div class="w-full h-full flex items-center justify-center text-gray-400">
                                                <i class="fas fa-utensils text-sm"></i>
                                            </div>
                                        }
                                    </div>

                                    <!-- Item Details -->
                                    <div class="flex-1 min-w-0">
                                        <h5 class="font-semibold text-gray-800 text-sm leading-tight mb-1" title="@item.ItemName">
                                            @item.ItemName
                                        </h5>

                                        <!-- Price Information -->
                                        @if (item.HasDiscount)
                                        {
                                            <div class="text-xs space-y-1">
                                                <div class="flex items-center space-x-2">
                                                    <span class="text-red-600 font-bold">Rp @item.UnitPrice.ToString("N0")</span>
                                                    <span class="text-gray-400 line-through">Rp @item.OriginalPrice.ToString("N0")</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-gray-600 text-xs font-bold">Rp @item.UnitPrice.ToString("N0")</p>
                                        }
                                    </div>
                                </div>

                                <!-- Note Field positioned under the image -->
                                <div class="mt-2">
                                    <input type="text"
                                           value="@(item.OrderNote ?? "")"
                                           class="px-3 py-2 text-xs border border-gray-300 rounded-md focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200 @(!string.IsNullOrEmpty(item.OrderNote) ? "bg-blue-50 border-blue-300" : "")"
                                           onchange="updateItemNote(@item.MenuItemId, this.value)"
                                           oninput="updateNoteVisual(this)"
                                           placeholder="Catatan Pesanan..."
                                           style="height: 32px; width: calc(100% + 75px);">
                                </div>
                            </div>

                            <!-- Quantity Controls (3 columns) -->
                            <div class="col-span-3 flex flex-col items-center">
                                <div class="flex items-center justify-center space-x-1">
                                    <button onclick="updateQuantity(@item.MenuItemId, @(item.Quantity - 1))"
                                            class="w-7 h-7 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-xs transition-colors @(item.Quantity <= 1 ? "opacity-50 cursor-not-allowed" : "")"
                                            @(item.Quantity <= 1 ? "disabled" : "")>
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <span class="w-8 text-center text-sm font-semibold">@item.Quantity</span>
                                    <button onclick="updateQuantity(@item.MenuItemId, @(item.Quantity + 1))"
                                            class="w-7 h-7 @(item.HasDiscount ? "bg-red-500 hover:bg-red-600" : "bg-blue-500 hover:bg-blue-600") text-white rounded-full flex items-center justify-center text-xs transition-colors">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Price Column (3 columns) -->
                            <div class="col-span-3 flex flex-col pl-2">
                                <div class="text-left">
                                    <span class="text-sm font-bold @(item.HasDiscount ? "text-red-600" : "text-gray-800")">
                                        @item.Subtotal.ToString("C0", new System.Globalization.CultureInfo("id-ID"))
                                    </span>
                                    @if (item.HasDiscount)
                                    {
                                        <p class="text-xs text-gray-400 line-through">
                                            @((item.OriginalPrice * item.Quantity).ToString("C0", new System.Globalization.CultureInfo("id-ID")))
                                        </p>
                                    }
                                </div>
                                <!-- Delete Button positioned under the price -->
                                <div class="mt-2 text-left">
                                    <button onclick="removeFromOrder(@item.MenuItemId)"
                                            class="text-red-500 hover:text-red-700 hover:bg-red-50 px-2 py-2 rounded transition-colors"
                                            title="Hapus item"
                                            style="height: 32px;">
                                        <i class="fas fa-trash text-xs"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center text-gray-500 py-12">
                <div class="mb-4">
                    <i class="fas fa-shopping-cart text-6xl text-gray-300"></i>
                </div>
                <h4 class="text-xl font-medium text-gray-600 mb-2">Belum Ada Pesanan</h4>
                <p class="text-sm text-gray-500">Silakan pilih menu untuk memulai pesanan</p>
            </div>
        }
    </div>

    <!-- Order Summary & Actions - Fixed at bottom -->
    <div class="mt-2">
        @if (Model.Items.Any())
        {
            <!-- Order Totals -->
            <div class="border-t border-gray-200 pt-3 space-y-2 bg-white">
                <!-- First Row: Total Item and Subtotal -->
                <div class="flex justify-between text-sm">
                    <div class="flex items-center space-x-1">
                        <span class="text-gray-600">Total Item:</span>
                        <span class="font-medium">@Model.Items.Sum(i => i.Quantity) pcs</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <span class="text-gray-600">Subtotal:</span>
                        <span class="font-medium">@Model.Subtotal.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</span>
                    </div>
                </div>

                <!-- Second Row: Order Discount and PPN -->
                <div class="flex justify-between text-sm">
                    <div class="flex items-center space-x-2">
                        <span id="discountLabel" class="text-gray-600">Diskon Order:</span>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox"
                                   id="discountToggle"
                                   class="sr-only peer"
                                   @(Model.Discount > 0 ? "checked" : "")
                                   onchange="toggleDiscount(this.checked)">
                            <div class="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-green-500"></div>
                        </label>
                        <span class="@(Model.Discount > 0 ? "text-green-600 font-medium" : "text-gray-400")">
                            @(Model.Discount > 0 ? "-" : "")@Model.Discount.ToString("C0", new System.Globalization.CultureInfo("id-ID"))
                        </span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <span class="text-gray-600">PPN (11%):</span>
                        <span class="font-medium">@Model.PPN.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</span>
                    </div>
                </div>

                <!-- Total Hemat Row (if any discounts) -->
                @if (Model.TotalSavings > 0)
                {
                    <div class="flex justify-between text-sm">
                        <span class="text-gray-600">Total Hemat:</span>
                        <span class="font-medium">
                            Rp @Model.TotalSavings.ToString("N0", new System.Globalization.CultureInfo("id-ID"))
                        </span>
                    </div>
                }

                <!-- Total -->
                <div class="flex justify-between font-bold text-lg border-t pt-2 text-gray-800">
                    <span>Total</span>
                    <span class="text-blue-600">@Model.Total.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</span>
                </div>
            </div>

            <!-- Action Buttons - Updated untuk slide payment -->
            <div class="mt-3 bg-white">
                <!-- Payment Button - Modified untuk slide effect -->
                <button onclick="showSlidePayment()"
                        class="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-all transform hover:scale-105 shadow-lg flex items-center justify-center space-x-2">
                    <i class="fas fa-credit-card"></i>
                    <span>Proses Pembayaran</span>
                </button>
            </div>
        }
    </div>
</div>

<script>
    // Update quantity function
    function updateQuantity(menuItemId, newQuantity) {
        if (newQuantity <= 0) {
            removeFromOrder(menuItemId);
            return;
        }

        const formData = new FormData();
        formData.append('menuItemId', menuItemId);
        formData.append('quantity', newQuantity);
        formData.append('__RequestVerificationToken', getAntiForgeryToken());

        fetch('/Home/UpdateOrderItemQuantity', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                refreshOrderSummary();
                // Don't show notification for quantity updates to reduce noise
            } else {
                showNotification(data.message || 'Terjadi kesalahan', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating quantity:', error);
            showNotification('Terjadi kesalahan saat mengupdate quantity', 'error');
        });
    }

    // Toggle order discount function (not menu discount)
    function toggleDiscount(isApplied) {
        const formData = new FormData();
        formData.append('applyDiscount', isApplied);
        formData.append('__RequestVerificationToken', getAntiForgeryToken());

        fetch('/Home/ApplyDiscount', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                refreshOrderSummary();
                showNotification(data.message, 'success');

                // Update discount label with current percentage
                if (data.discountPercentage) {
                    const discountLabel = document.getElementById('discountLabel');
                    if (discountLabel) {
                        discountLabel.textContent = `Diskon Order ${data.discountPercentage}%`;
                    }
                }
            } else {
                \
                const discountToggle = document.getElementById('discountToggle');
                if (discountToggle) {
                    discountToggle.checked = !isApplied;
                }
                showNotification(data.message || 'Terjadi kesalahan', 'error');
            }
        })
        .catch(error => {
            console.error('Error applying discount:', error);
            const discountToggle = document.getElementById('discountToggle');
            if (discountToggle) {
                discountToggle.checked = !isApplied;
            }
            showNotification('Terjadi kesalahan saat menerapkan diskon', 'error');
        });
    }

    // Update item note function - No notification for auto-save
    function updateItemNote(menuItemId, note) {
        const formData = new FormData();
        formData.append('menuItemId', menuItemId);
        formData.append('note', note);
        formData.append('__RequestVerificationToken', getAntiForgeryToken());

        fetch('/Home/UpdateItemNote', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // Silent save - no notification shown
            if (!data.success) {
                showNotification(data.message || 'Terjadi kesalahan', 'error');
            }
        })
        .catch(error => {
            console.error('Error saving note:', error);
            showNotification('Terjadi kesalahan saat menyimpan catatan', 'error');
        });
    }

    // Update note visual styling without refresh
    function updateNoteVisual(input) {
        if (input.value.trim()) {
            input.classList.add('bg-blue-50', 'border-blue-300');
        } else {
            input.classList.remove('bg-blue-50', 'border-blue-300');
        }
    }

    // Initialize discount label when partial loads
    document.addEventListener('DOMContentLoaded', function() {
        updateDiscountLabel();

        // Initialize note field styling
        document.querySelectorAll('input[placeholder="Catatan Pesanan..."]').forEach(input => {
            updateNoteVisual(input);
        });
    });

    function updateDiscountLabel() {
        if (typeof fetch !== 'undefined') {
            fetch('/Home/GetOrderSummaryData')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data.discountPercentage) {
                        const discountLabel = document.getElementById('discountLabel');
                        if (discountLabel) {
                            discountLabel.textContent = `Diskon Order ${data.data.discountPercentage}%`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating discount label:', error);
                });
        }
    }

    // Helper function to get anti-forgery token
    function getAntiForgeryToken() {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenElement ? tokenElement.value : '';
    }

    // Make sure functions are available globally
    if (typeof window !== 'undefined') {
        window.updateQuantity = updateQuantity;
        window.toggleDiscount = toggleDiscount;
        window.updateItemNote = updateItemNote;
        window.updateNoteVisual = updateNoteVisual;
    }

    // Initialize discount label when this partial is loaded
    setTimeout(updateDiscountLabel, 100);
</script>

<style>
    .order-item {
        transition: all 0.2s ease;
    }

        .order-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        /* Enhanced styling for discount items */
        .order-item.bg-red-50 {
            background: linear-gradient(135deg, #fef2f2 0%, #fdf2f8 100%);
            border: 1px solid #fecaca;
        }

            .order-item.bg-red-50:hover {
                box-shadow: 0 4px 12px rgba(239, 68, 68, 0.1);
            }

    /* Custom scrollbar for order items */
    .overflow-y-auto::-webkit-scrollbar {
        width: 4px;
    }

    .overflow-y-auto::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 2px;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 2px;
    }

        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

    /* Grid layout responsive adjustments */
    media (max-width: 640px) {
        .grid.grid-cols-12

    {
        display: block;
    }

    .grid.grid-cols-12 > div {
        margin-bottom: 0.5rem;
    }

    }

    /* Ensure note input and delete button have same height */
    input[placeholder="Catatan Pesanan..."] {
        height: 32px;
    }
</style>