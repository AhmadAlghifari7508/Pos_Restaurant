@model POSRestoran01.Models.ViewModels.HomeViewModels.POSViewModel
@{
    ViewData["Title"] = "POS Kasir";
}

<style>
    .slide-container {
        transition: transform 0.3s ease-in-out;
    }

    .slide-left {
        transform: translateX(-50%);
    }
</style>

<div class="flex h-full bg-gray-100">
    <!-- Left Panel - Menu Selection -->
    <div class="w-2/3 overflow-y-auto">
        <!-- Header with Title and Search moved to top -->
        <div class="bg-white shadow-sm border-b border-gray-200 p-6">
            <div class="flex items-center justify-between">
                <div class="flex-1">
                    <h2 class="text-2xl font-bold text-gray-800 mb-1">@Model.RestaurantName</h2>
                    <p class="text-gray-600">@Model.CurrentDate.ToString("dddd, dd MMMM yyyy", new System.Globalization.CultureInfo("id-ID"))</p>
                </div>
                <!-- Search moved to right side -->
                <div class="w-80 relative">
                    <div class="relative">
                        <input type="text"
                               id="searchInput"
                               placeholder="Cari menu..."
                               value="@Model.SearchTerm"
                               class="w-full px-4 py-2 pl-10 pr-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm"></i>
                        <button onclick="clearSearch()" id="clearSearchBtn"
                                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 @(string.IsNullOrEmpty(Model.SearchTerm) ? "hidden" : "")">
                            <i class="fas fa-times text-sm"></i>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <div class="mt-2 flex items-center text-xs text-gray-600">
                            <i class="fas fa-info-circle mr-1"></i>
                            <span>Hasil pencarian: "<strong>@Model.SearchTerm</strong>"</span>
                            <button onclick="clearSearch()" class="ml-2 text-blue-500 hover:text-blue-700">
                                <i class="fas fa-times mr-1"></i>Hapus
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Content Area -->
        <div class="p-6">
            <!-- Category Tabs -->
            <div class="mb-6">
                <div class="flex space-x-2 border-b border-gray-200 overflow-x-auto">
                    <!-- All Categories Tab - Set as default active -->
                    <button onclick="loadAllCategories()"
                            class="px-4 py-2 font-medium transition-colors category-tab whitespace-nowrap border-b-2 border-blue-500 text-blue-600"
                            data-category-id="0">
                        <i class="fas fa-th-large mr-2"></i>Semua Kategori
                    </button>

                    @foreach (var category in Model.Categories)
                    {
                        <button onclick="loadCategory(@category.CategoryId)"
                                class="px-4 py-2 font-medium transition-colors category-tab whitespace-nowrap text-gray-600 hover:text-blue-600"
                                data-category-id="@category.CategoryId">
                            @category.CategoryName
                        </button>
                    }
                </div>
            </div>

            <!-- Menu Items Section -->
            <div class="mb-4">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-semibold text-gray-800">
                        Pilih Menu
                    </h3>
                    <span class="text-sm text-gray-500" id="itemCount">
                        @Model.MenuItems.Count item(s)
                    </span>
                </div>
            </div>

            <!-- Menu Items Grid -->
            <div id="menuItemsContainer" class="min-h-[200px]">
                @await Html.PartialAsync("_MenuItemsPartial", Model.MenuItems)
            </div>
        </div>
    </div>

    <!-- Right Panel Container - dengan slide effect -->
    <div class="w-1/3 relative overflow-hidden">
        <div id="slideContainer" class="slide-container flex w-[200%]">
            <!-- Panel 1: Order Summary -->
            <div class="w-1/2 bg-white shadow-xl border-l border-gray-200 flex flex-col">
                <div class="flex-1 overflow-hidden">
                    <div id="orderSummaryContainer" class="h-full">
                        @await Html.PartialAsync("_OrderSummaryPartial", Model.CurrentOrder)
                    </div>
                </div>
            </div>

            <!-- Panel 2: Payment Form -->
            <div class="w-1/2 bg-white shadow-xl border-l border-gray-200 flex flex-col">
                <div class="flex-1 overflow-y-auto">
                    <div id="paymentFormContainer" class="h-full">
                        @await Html.PartialAsync("_SlidePaymentPartial")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center z-40">
    <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
        <span class="text-gray-700">Memproses...</span>
    </div>
</div>

@section Scripts {
    <script src="~/js/pos.js"></script>
    <script>
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializePOS();

            // Add CSRF token to all AJAX requests
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!token) {
                const newToken = document.createElement('input');
                newToken.type = 'hidden';
                newToken.name = '__RequestVerificationToken';
                newToken.value = '@Html.AntiForgeryToken()'.match(/value="([^"]*)"/) ? '@Html.AntiForgeryToken()'.match(/value="([^"]*)"/)[1] : '';
                document.body.appendChild(newToken);
            }

            // Setup search functionality
            setupSearch();

            // Set default active category to "Semua Kategori"
            updateActiveCategoryTab(0);
        });

        function setupSearch() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', performSearch);
                searchInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        clearSearch();
                    }
                });
            }
        }

        // Override showPaymentModal function untuk slide effect
        function showPaymentModal() {
            // Check if there's any order
            fetch('/Home/GetOrderSummaryData')
                .then(response => response.json())
                .then(data => {
                    if (!data.success || data.data.isEmpty) {
                        showNotification('Tidak ada item dalam order', 'warning');
                        return;
                    }

                    // Show slide payment instead of modal
                    showSlidePayment();
                })
                .catch(error => {
                    console.error('Error checking order:', error);
                    showNotification('Terjadi kesalahan saat membuka pembayaran', 'error');
                });
        }

        // New function for slide payment
        function showSlidePayment() {
            document.getElementById('slideContainer').classList.add('slide-left');
            updatePaymentSummary();
        }

        // New function to hide slide payment
        function hideSlidePayment() {
            document.getElementById('slideContainer').classList.remove('slide-left');
        }

        // Update payment summary in slide payment
        function updatePaymentSummary() {
            fetch('/Home/GetOrderSummaryData')
                .then(response => response.json())
                .then(data => {
                    if (data.success && !data.data.isEmpty) {
                        const orderData = data.data;
                        const totalElement = document.getElementById('paymentTotalAmount');
                        if (totalElement) {
                            totalElement.textContent = `Rp ${orderData.total.toLocaleString('id-ID')}`;
                            calculateSlideChange();
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating payment summary:', error);
                });
        }

        // Calculate change in slide payment
        function calculateSlideChange() {
            const cashInput = document.getElementById('slideCashAmount');
            const totalElement = document.getElementById('paymentTotalAmount');

            if (!cashInput || !totalElement) return;

            const cash = parseFloat(cashInput.value) || 0;
            const totalText = totalElement.textContent;
            const total = parseFloat(totalText.replace(/[Rp.,\s]/g, '')) || 0;

            const change = Math.max(0, cash - total);

            // Update displays
            const cashReceivedElement = document.getElementById('slideCashReceived');
            const paymentTotalElement = document.getElementById('slidePaymentTotal');
            const changeElement = document.getElementById('slideChange');
            const confirmBtn = document.getElementById('slideConfirmBtn');

            if (cashReceivedElement) {
                cashReceivedElement.textContent = `Rp ${cash.toLocaleString('id-ID')}`;
            }
            if (paymentTotalElement) {
                paymentTotalElement.textContent = `Rp ${total.toLocaleString('id-ID')}`;
            }
            if (changeElement) {
                changeElement.textContent = `Rp ${change.toLocaleString('id-ID')}`;
            }

            // Update button state
            if (confirmBtn) {
                if (cash >= total && total > 0) {
                    confirmBtn.disabled = false;
                    confirmBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    changeElement?.classList.remove('text-red-600');
                    changeElement?.classList.add('text-green-600');
                } else {
                    confirmBtn.disabled = true;
                    confirmBtn.classList.add('opacity-50', 'cursor-not-allowed');
                    changeElement?.classList.remove('text-green-600');
                    changeElement?.classList.add('text-red-600');
                }
            }
        }

        // Toggle table number in slide payment
        function toggleSlideTableNo() {
            const orderTypeRadios = document.querySelectorAll('input[name="slideOrderType"]');
            const checkedRadio = document.querySelector('input[name="slideOrderType"]:checked');
            const tableNoContainer = document.getElementById('slideTableNoContainer');
            const tableNoInput = document.querySelector('input[name="slideTableNo"]');

            if (checkedRadio && tableNoContainer && tableNoInput) {
                if (checkedRadio.value === 'Dine In') {
                    tableNoContainer.style.display = 'block';
                    tableNoInput.required = true;
                } else {
                    tableNoContainer.style.display = 'none';
                    tableNoInput.required = false;
                    tableNoInput.value = '';
                }
            }
        }

        // Process slide payment
        function processSlidePayment() {
            const customerName = document.getElementById('slideCustomerName')?.value || '';
            const orderTypeRadio = document.querySelector('input[name="slideOrderType"]:checked');
            const tableNo = document.getElementById('slideTableNo')?.value || '';
            const cash = parseFloat(document.getElementById('slideCashAmount')?.value || '0');

            if (!orderTypeRadio) {
                showNotification('Pilih tipe pesanan', 'error');
                return;
            }

            const orderType = orderTypeRadio.value;

            if (orderType === 'Dine In' && (!tableNo || parseInt(tableNo) <= 0)) {
                showNotification('Nomor meja harus diisi untuk Dine In', 'error');
                return;
            }

            if (cash <= 0) {
                showNotification('Jumlah cash harus diisi', 'error');
                return;
            }

            // Validate cash amount
            const totalElement = document.getElementById('paymentTotalAmount');
            if (totalElement) {
                const total = parseFloat(totalElement.textContent.replace(/[Rp.,\s]/g, '')) || 0;
                if (cash < total) {
                    showNotification('Jumlah cash tidak mencukupi', 'error');
                    return;
                }
            }

            const formData = new FormData();
            formData.append('CustomerName', customerName);
            formData.append('OrderType', orderType);
            if (orderType === 'Dine In') {
                formData.append('TableNo', tableNo);
            }
            formData.append('PaymentMethod', 'Cash');
            formData.append('Cash', cash);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            showLoading();

            fetch('/Home/ProcessPayment', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();

                if (data.success) {
                    hideSlidePayment();
                    showNotification('Pembayaran berhasil diproses!', 'success');

                    // Reset form
                    document.getElementById('slideCustomerName').value = '';
                    document.getElementById('slideCashAmount').value = '';
                    document.getElementById('slideTableNo').value = '';

                    // Refresh the page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showNotification(data.message || 'Terjadi kesalahan dalam pembayaran', 'error');
                }
            })
            .catch(error => {
                hideLoading();
                console.error('Payment error:', error);
                showNotification('Terjadi kesalahan sistem', 'error');
            });
        }

        // Utility function
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        // Make functions globally available
        window.showSlidePayment = showSlidePayment;
        window.hideSlidePayment = hideSlidePayment;
        window.calculateSlideChange = calculateSlideChange;
        window.toggleSlideTableNo = toggleSlideTableNo;
        window.processSlidePayment = processSlidePayment;
    </script>
}

@{
    // Add anti-forgery token
    @Html.AntiForgeryToken()
}