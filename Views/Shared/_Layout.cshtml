<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - POS Restoran</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .icon-transition {
            transition: opacity 0.15s ease-in-out;
        }

        .icon-fade-out {
            opacity: 0;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="flex h-screen">

        <div class="w-20 bg-blue-900 text-white flex flex-col items-center py-4 space-y-8">

            <div class="p-3 bg-blue-800 rounded-lg mb-4">
                <i id="sidebarTopIcon" class="text-xl icon-transition"></i>
            </div>

            <a href="@Url.Action("Index", "Home")"
               class="sidebar-link p-3 rounded-lg hover:bg-blue-800 transition-colors @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Home" ? "bg-blue-800" : "")"
               data-controller="Home"
               data-icon="fas fa-home"
               data-title="POS Kasir">
                <i class="fas fa-home text-xl"></i>
            </a>

            <a href="@Url.Action("Index", "Product")"
               class="sidebar-link p-3 rounded-lg hover:bg-blue-800 transition-colors @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Product" ? "bg-blue-800" : "")"
               data-controller="Product"
               data-icon="fas fa-box"
               data-title="Manajemen Produk">
                <i class="fas fa-box text-xl"></i>
            </a>

            <a href="@Url.Action("Index", "Dashboard")"
               class="sidebar-link p-3 rounded-lg hover:bg-blue-800 transition-colors @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Dashboard" ? "bg-blue-800" : "")"
               data-controller="Dashboard"
               data-icon="fas fa-chart-bar"
               data-title="Dashboard">
                <i class="fas fa-chart-bar text-xl"></i>
            </a>

            <a href="@Url.Action("Index", "Settings")"
               class="sidebar-link p-3 rounded-lg hover:bg-blue-800 transition-colors @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Settings" ? "bg-blue-800" : "")"
               data-controller="Settings"
               data-icon="fas fa-cog"
               data-title="Pengaturan">
                <i class="fas fa-cog text-xl"></i>
            </a>
        </div>
        <div class="flex-1 overflow-hidden">
            @RenderBody()
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/receipt.js"></script>
    
    <script>
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement) {
                console.error('Anti-forgery token not found!');
                return '';
            }
            return tokenElement.value;
        }

        function showLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.remove('hidden');
                overlay.classList.add('flex');
            }
        }

        function hideLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.add('hidden');
                overlay.classList.remove('flex');
            }
        }

        function showNotification(message, type = 'info', duration = 4000) {
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => notification.remove());

            const notification = document.createElement('div');
            notification.className = `notification fixed top-4 right-4 px-6 py-4 rounded-xl shadow-2xl z-50 transform transition-all duration-300 translate-x-full max-w-sm`;

            let bgColor, textColor, icon, borderColor;
            switch (type) {
                case 'success':
                    bgColor = 'bg-green-500';
                    textColor = 'text-white';
                    icon = 'fas fa-check-circle';
                    borderColor = 'border-green-600';
                    break;
                case 'error':
                    bgColor = 'bg-red-500';
                    textColor = 'text-white';
                    icon = 'fas fa-exclamation-circle';
                    borderColor = 'border-red-600';
                    break;
                case 'warning':
                    bgColor = 'bg-yellow-500';
                    textColor = 'text-white';
                    icon = 'fas fa-exclamation-triangle';
                    borderColor = 'border-yellow-600';
                    break;
                default:
                    bgColor = 'bg-blue-500';
                    textColor = 'text-white';
                    icon = 'fas fa-info-circle';
                    borderColor = 'border-blue-600';
            }

            notification.className += ` ${bgColor} ${textColor} border-l-4 ${borderColor}`;
            notification.innerHTML = `
                <div class="flex items-start space-x-3">
                    <i class="${icon} text-lg mt-0.5"></i>
                    <div class="flex-1">
                        <p class="font-medium">${message}</p>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="text-white hover:text-gray-200 transition-colors">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 10);

            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 300);
            }, duration);
        }

        function updateTopIcon(iconClass) {
            const sidebarTopIcon = document.getElementById('sidebarTopIcon');
            if (sidebarTopIcon && iconClass) {
                sidebarTopIcon.className = iconClass + ' text-xl icon-transition';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const currentController = '@ViewContext.RouteData.Values["Controller"]?.ToString()';

            const activeLink = document.querySelector('.sidebar-link[data-controller="' + currentController + '"]');
            if (activeLink) {
                const icon = activeLink.getAttribute('data-icon');
                updateTopIcon(icon);
            } else {
                updateTopIcon('fas fa-home');
            }

            console.log('Layout loaded successfully');
            console.log('Global functions available: getAntiForgeryToken, showLoading, hideLoading, showNotification');
        });

        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.addEventListener('click', function(e) {
                const icon = this.getAttribute('data-icon');
                updateTopIcon(icon);
            });
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>