@model POSRestoran01.Models.ViewModels.DashboardViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="flex h-screen bg-gray-100">
    <div class="flex-1 p-6 overflow-hidden">
        <div class="mb-6">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800">Dashboard</h1>
                    <p class="text-gray-600" id="selectedDateDisplay">@Model.SelectedDate.ToString("dddd, dd MMMM yyyy", new System.Globalization.CultureInfo("id-ID"))</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <label class="text-sm text-gray-600">Dari:</label>
                        <input type="date" id="dateFromFilter" value="@Model.SelectedDate.ToString("yyyy-MM-dd")"
                               class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm">
                    </div>
                    <div class="flex items-center space-x-2">
                        <label class="text-sm text-gray-600">Sampai:</label>
                        <input type="date" id="dateToFilter" value="@Model.SelectedDate.ToString("yyyy-MM-dd")"
                               class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm">
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-12 gap-6 h-full max-h-[calc(100vh-200px)]">
            <div class="col-span-8 flex flex-col">
                <div class="grid grid-cols-3 gap-4 mb-4">
                    <div class="bg-white rounded-lg shadow-md p-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Total Pendapatan</p>
                                <p class="text-xl font-bold text-green-600" id="totalRevenue">
                                    @Model.TotalRevenue.ToString("C", new System.Globalization.CultureInfo("id-ID"))
                                </p>
                            </div>
                            <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                                <i class="fas fa-money-bill-wave text-green-600"></i>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-lg shadow-md p-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Total Menu Dipesan</p>
                                <p class="text-xl font-bold text-blue-600" id="totalMenusOrdered">@Model.TotalMenusOrdered</p>
                            </div>
                            <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                                <i class="fas fa-utensils text-blue-600"></i>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-lg shadow-md p-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-gray-500 text-sm font-medium">Total Customer</p>
                                <p class="text-xl font-bold text-purple-600" id="totalCustomers">@Model.TotalCustomers</p>
                            </div>
                            <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                                <i class="fas fa-users text-purple-600"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md flex-1 flex flex-col">
                    <div class="p-4 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                            <h2 class="text-lg font-semibold text-gray-800">Laporan Pesanan</h2>
                            <div class="flex items-center space-x-2">
                                <select id="statusFilter" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:border-blue-500">
                                    <option value="">Semua Status</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Preparing">Preparing</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Canceled">Canceled</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="p-4 flex-1 overflow-hidden">
                        <div id="orderReportTable" class="max-h-60 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200">
                            @await Html.PartialAsync("_OrderReportPartial", Model.OrderReports)
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-span-4 flex flex-col space-y-4">
                <div class="bg-white rounded-lg shadow-md flex-1">
                    <div class="p-4 border-b border-gray-200">
                        <h3 class="font-semibold text-gray-800">Menu Terlaris</h3>
                    </div>
                    <div class="p-4 flex-1 overflow-hidden">
                        <div id="popularMenuContainer" class="max-h-48 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200">
                            @await Html.PartialAsync("_PopularMenuPartial", Model.PopularMenus)
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md flex-1">
                    <div class="p-4 border-b border-gray-200">
                        <h3 class="font-semibold text-gray-800">Jenis Pesanan</h3>
                    </div>
                    <div class="p-4 flex-1 overflow-hidden">
                        <div id="orderTypeStatsContainer" class="max-h-48 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200">
                            @await Html.PartialAsync("_OrderTypeStatsPartial", Model.OrderTypeStats)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="orderDetailModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-2xl w-full max-w-2xl mx-4 max-h-screen overflow-y-auto">
        <div class="p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-800">Detail Order</h3>
                <button onclick="hideOrderDetailModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div id="orderDetailContent">
            </div>
        </div>
    </div>
</div>

<div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center z-40">
    <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
        <span class="text-gray-700">Memproses...</span>
    </div>
</div>

<style>
    .scrollbar-thin::-webkit-scrollbar {
        width: 6px;
    }

    .scrollbar-track-gray-200::-webkit-scrollbar-track {
        background: #f3f4f6;
        border-radius: 3px;
    }

    .scrollbar-thumb-gray-400::-webkit-scrollbar-thumb {
        background: #9ca3af;
        border-radius: 3px;
    }

        .scrollbar-thumb-gray-400::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }

    .scrollbar-thin {
        scrollbar-width: thin;
        scrollbar-color: #9ca3af #f3f4f6;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeDashboard();
            setupEventListeners();
        });

        function initializeDashboard() {
            console.log('Dashboard initialized');
            updateDashboardWithDateRange();
        }

        function setupEventListeners() {
            const dateFromFilter = document.getElementById('dateFromFilter');
            if (dateFromFilter) {
                dateFromFilter.addEventListener('change', function() {
                    updateDashboardWithDateRange();
                });
            }

            const dateToFilter = document.getElementById('dateToFilter');
            if (dateToFilter) {
                dateToFilter.addEventListener('change', function() {
                    updateDashboardWithDateRange();
                });
            }

            const statusFilter = document.getElementById('statusFilter');
            if (statusFilter) {
                statusFilter.addEventListener('change', function() {
                    loadOrderReports();
                });
            }
        }

        function updateDashboardWithDateRange() {
            const fromDate = document.getElementById('dateFromFilter').value;
            const toDate = document.getElementById('dateToFilter').value;

            if (!fromDate || !toDate) {
                return;
            }

            if (new Date(fromDate) > new Date(toDate)) {
                showNotification('Tanggal "Dari" tidak boleh lebih besar dari tanggal "Sampai"', 'error');
                return;
            }

            showLoading();
            updateSelectedDateDisplay(fromDate, toDate);

            const params = new URLSearchParams();
            params.append('startDate', fromDate);
            params.append('endDate', toDate);

            fetch(`/Dashboard/GetDashboardData?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        updateStatsCards(data.data);
                        loadOrderReports();
                        loadPopularMenus();
                        loadOrderTypeStats();
                    } else {
                        showNotification(data.message || 'Terjadi kesalahan', 'error');
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error updating dashboard data:', error);
                    showNotification('Terjadi kesalahan saat memuat data dashboard', 'error');
                });
        }

        function updateSelectedDateDisplay(fromDate, toDate) {
            const selectedDateDisplay = document.getElementById('selectedDateDisplay');
            if (selectedDateDisplay) {
                const fromDateObj = new Date(fromDate);
                const toDateObj = new Date(toDate);

                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                const fromDateStr = fromDateObj.toLocaleDateString('id-ID', options);
                const toDateStr = toDateObj.toLocaleDateString('id-ID', options);

                if (fromDate === toDate) {
                    selectedDateDisplay.textContent = fromDateStr;
                } else {
                    selectedDateDisplay.textContent = `${fromDateStr} - ${toDateStr}`;
                }
            }
        }

        function updateStatsCards(data) {
            const totalRevenueEl = document.getElementById('totalRevenue');
            const totalMenusOrderedEl = document.getElementById('totalMenusOrdered');
            const totalCustomersEl = document.getElementById('totalCustomers');

            if (totalRevenueEl) totalRevenueEl.textContent = formatCurrency(data.totalRevenue);
            if (totalMenusOrderedEl) totalMenusOrderedEl.textContent = data.totalMenusOrdered || 0;
            if (totalCustomersEl) totalCustomersEl.textContent = data.totalCustomers;
        }

        function loadOrderReports() {
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            const params = new URLSearchParams();
            if (dateFromFilter) params.append('startDate', dateFromFilter);
            if (dateToFilter) params.append('endDate', dateToFilter);
            if (statusFilter) params.append('status', statusFilter);
            params.append('page', 1);
            params.append('pageSize', 50);

            fetch(`/Dashboard/GetOrderReports?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        renderOrderReports(data.data);
                    } else {
                        showNotification(data.message || 'Terjadi kesalahan', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading order reports:', error);
                    showNotification('Terjadi kesalahan saat memuat laporan order', 'error');
                });
        }

        function renderOrderReports(orders) {
            const container = document.getElementById('orderReportTable');
            if (!orders || orders.length === 0) {
                container.innerHTML = '<div class="text-center py-8 text-gray-500">Tidak ada data order</div>';
                return;
            }

            let html = `
                <table class="min-w-full">
                    <thead class="sticky top-0 bg-white z-10">
                        <tr class="border-b border-gray-200">
                            <th class="text-left py-2 px-2 font-semibold text-gray-700 text-sm">Customer</th>
                            <th class="text-left py-2 px-2 font-semibold text-gray-700 text-sm">Menu</th>
                            <th class="text-left py-2 px-2 font-semibold text-gray-700 text-sm">Total</th>
                            <th class="text-left py-2 px-2 font-semibold text-gray-700 text-sm">Status</th>
                            <th class="text-left py-2 px-2 font-semibold text-gray-700 text-sm" style="min-width: 200px;">Aksi</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            orders.forEach(order => {
                const statusClass = getStatusClass(order.status);
                const orderDate = new Date(order.orderDate);
                const formattedDate = orderDate.toLocaleDateString('id-ID', { day: '2-digit', month: '2-digit', year: 'numeric' });
                const formattedTime = order.orderTime ? order.orderTime.substring(0, 5) : '';

                html += `
                    <tr class="border-b border-gray-100 hover:bg-gray-50">
                        <td class="py-2 px-2">
                            <div>
                                <div class="font-medium text-sm">${order.customerName || 'Guest'}</div>
                                <div class="text-xs text-gray-500">${order.orderNumber}</div>
                                <div class="text-xs text-gray-400">${formattedDate} ${formattedTime}</div>
                            </div>
                        </td>
                        <td class="py-2 px-2">
                            <div class="text-xs text-gray-600 truncate max-w-xs">${order.menuSummary}</div>
                            <div class="text-xs text-gray-400">${order.orderType}${order.tableNo ? ' - Table ' + order.tableNo : ''}</div>
                        </td>
                        <td class="py-2 px-2 font-semibold text-sm">${formatCurrency(order.total)}</td>
                        <td class="py-2 px-2">
                            <span class="px-2 py-1 text-xs rounded-full ${statusClass}">${order.status}</span>
                        </td>
                        <td class="py-2 px-2">
                            <div class="flex space-x-2 items-center flex-wrap gap-1">
                                <select onchange="updateOrderStatus(${order.orderId}, this.value)"
                                        class="text-xs border rounded px-2 py-1"
                                        style="font-size:10px; min-width: 90px;">
                                    <option value="">Ubah</option>
                                    ${order.status !== 'Pending' ? '<option value="Pending">Pending</option>' : ''}
                                    ${order.status !== 'Preparing' ? '<option value="Preparing">Preparing</option>' : ''}
                                    ${order.status !== 'Completed' ? '<option value="Completed">Completed</option>' : ''}
                                    ${order.status !== 'Canceled' ? '<option value="Canceled">Canceled</option>' : ''}
                                </select>

                                <button onclick="showOrderDetail(${order.orderId})"
                                        class="text-blue-600 hover:text-blue-800 hover:bg-blue-50 p-2 rounded"
                                        title="Lihat Detail"
                                        type="button">
                                    <i class="fas fa-eye"></i>
                                </button>
                `;

                // TOMBOL PRINT - Hanya muncul jika status Completed
                if (order.status === 'Completed') {
                    html += `
                                <button onclick="printReceipt(${order.orderId})"
                                        class="text-green-600 hover:text-green-800 hover:bg-green-50 p-2 rounded"
                                        title="Cetak Struk"
                                        type="button">
                                    <i class="fas fa-print"></i>
                                </button>
                    `;
                }

                html += `
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += '</tbody></table>';
            container.innerHTML = html;
        }

        function loadPopularMenus() {
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;

            const params = new URLSearchParams();
            if (dateFromFilter) params.append('startDate', dateFromFilter);
            if (dateToFilter) params.append('endDate', dateToFilter);

            fetch(`/Dashboard/GetPopularMenus?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        renderPopularMenus(data.data);
                    } else {
                        showNotification(data.message || 'Terjadi kesalahan', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading popular menus:', error);
                    showNotification('Terjadi kesalahan saat memuat menu populer', 'error');
                });
        }

        function renderPopularMenus(menus) {
            const container = document.getElementById('popularMenuContainer');
            if (!menus || menus.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <i class="fas fa-chart-bar text-2xl mb-2"></i>
                        <p class="text-sm">Tidak ada data menu populer</p>
                    </div>
                `;
                return;
            }

            let html = '';
            menus.forEach((menu, index) => {
                html += `
                    <div class="flex items-center space-x-3 py-2 ${index < menus.length - 1 ? 'border-b border-gray-100' : ''}">
                        <div class="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
                            <span class="text-xs font-semibold text-blue-600">${index + 1}</span>
                        </div>
                        <div class="flex-1">
                            <p class="font-medium text-sm">${menu.itemName}</p>
                            <p class="text-xs text-gray-500">${menu.categoryName}</p>
                        </div>
                        <div class="text-right">
                            <p class="font-semibold text-sm">${menu.totalOrdered}</p>
                            <p class="text-xs text-gray-500">${formatCurrency(menu.revenue)}</p>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        function loadOrderTypeStats() {
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;

            const params = new URLSearchParams();
            if (dateFromFilter) params.append('startDate', dateFromFilter);
            if (dateToFilter) params.append('endDate', dateToFilter);

            fetch(`/Dashboard/GetOrderTypeStats?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        renderOrderTypeStats(data.data);
                    } else {
                        showNotification(data.message || 'Terjadi kesalahan', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading order type stats:', error);
                    showNotification('Terjadi kesalahan saat memuat statistik tipe order', 'error');
                });
        }

        function renderOrderTypeStats(stats) {
            const container = document.getElementById('orderTypeStatsContainer');
            if (!stats || stats.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <i class="fas fa-pie-chart text-2xl mb-2"></i>
                        <p class="text-sm">Tidak ada data tipe order</p>
                    </div>
                `;
                return;
            }

            let html = '';
            stats.forEach((stat, index) => {
                const color = stat.orderType === 'Dine In' ? 'bg-blue-500' : 'bg-green-500';
                html += `
                    <div class="flex items-center justify-between py-3 ${index < stats.length - 1 ? 'border-b border-gray-100' : ''}">
                        <div class="flex items-center space-x-3">
                            <div class="w-3 h-3 rounded-full ${color}"></div>
                            <span class="font-medium text-sm">${stat.orderType}</span>
                        </div>
                        <div class="text-right">
                            <p class="font-semibold text-sm">${stat.count} (${stat.percentage.toFixed(1)}%)</p>
                            <p class="text-xs text-gray-500">${formatCurrency(stat.revenue)}</p>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        function getStatusClass(status) {
            switch (status) {
                case 'Pending': return 'bg-yellow-100 text-yellow-800';
                case 'Preparing': return 'bg-blue-100 text-blue-800';
                case 'Completed': return 'bg-green-100 text-green-800';
                case 'Canceled': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: 'IDR'
            }).format(amount);
        }

        function updateOrderStatus(orderId, status) {
            if (!status) return;

            if (!confirm(`Apakah Anda yakin ingin mengubah status order ini menjadi ${status}?`)) {
                return;
            }

            const formData = new FormData();
            formData.append('orderId', orderId);
            formData.append('status', status);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            showLoading();

            fetch('/Dashboard/UpdateOrderStatus', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadOrderReports();
                } else {
                    showNotification(data.message || 'Terjadi kesalahan', 'error');
                }
            })
            .catch(error => {
                hideLoading();
                console.error('Error updating order status:', error);
                showNotification('Terjadi kesalahan saat mengubah status order', 'error');
            });
        }

        function showOrderDetail(orderId) {
            showLoading();

            fetch(`/Dashboard/GetOrderDetails?orderId=${orderId}`)
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        renderOrderDetail(data.data);
                        document.getElementById('orderDetailModal').classList.remove('hidden');
                        document.getElementById('orderDetailModal').classList.add('flex');
                    } else {
                        showNotification(data.message || 'Terjadi kesalahan', 'error');
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error loading order details:', error);
                    showNotification('Terjadi kesalahan saat memuat detail order', 'error');
                });
        }

        function renderOrderDetail(order) {
            const content = document.getElementById('orderDetailContent');
            let html = `
                <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Order Number</label>
                            <p class="text-sm text-gray-900">${order.orderNumber}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Customer</label>
                            <p class="text-sm text-gray-900">${order.customerName || 'Guest'}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Order Type</label>
                            <p class="text-sm text-gray-900">${order.orderType}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Table No</label>
                            <p class="text-sm text-gray-900">${order.tableNo || '-'}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Date & Time</label>
                            <p class="text-sm text-gray-900">${order.orderDate} ${order.orderTime}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Status</label>
                            <span class="px-2 py-1 text-xs rounded-full ${getStatusClass(order.status)}">${order.status}</span>
                        </div>
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700">Kasir</label>
                            <p class="text-sm text-gray-900">${order.cashier || 'Unknown'}</p>
                        </div>
                    </div>

                    <div class="border-t pt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Items</label>
                        <div class="space-y-2">
            `;

            order.items.forEach(item => {
                html += `
                    <div class="flex justify-between items-start py-2 border-b border-gray-100">
                        <div class="flex-1">
                            <p class="font-medium">${item.itemName}</p>
                            ${item.orderNote ? `<p class="text-sm text-gray-500">Note: ${item.orderNote}</p>` : ''}
                        </div>
                        <div class="text-right">
                `;

                if (item.hasDiscount) {
                    html += `
                            <div class="space-y-1">
                                <div class="flex items-center justify-end space-x-2">
                                    <span class="text-xs line-through text-gray-400">${formatCurrency(item.originalPrice)}</span>
                                    <span class="text-xs bg-red-100 text-red-600 px-2 py-0.5 rounded-full font-medium">${item.formattedDiscountPercentage}</span>
                                </div>
                                <p class="font-medium text-green-600">${item.quantity} x ${formatCurrency(item.unitPrice)}</p>
                                <p class="text-sm text-gray-600">${formatCurrency(item.subtotal)}</p>
                                <p class="text-xs text-green-600 font-medium">Hemat: ${formatCurrency(item.totalSavingsPerItem)}</p>
                            </div>
                    `;
                } else {
                    html += `
                            <p class="font-medium">${item.quantity} x ${formatCurrency(item.unitPrice)}</p>
                            <p class="text-sm text-gray-500">${formatCurrency(item.subtotal)}</p>
                    `;
                }

                html += `
                        </div>
                    </div>
                `;
            });

            html += `
                        </div>
                    </div>

                    <div class="border-t pt-4 space-y-2">
            `;

            // Show total savings if any
            if (order.totalSavings > 0) {
                html += `
                        <div class="bg-green-50 border border-green-200 rounded-lg p-3 mb-3">
                            <div class="flex justify-between items-center text-green-700 font-semibold mb-2">
                                <span class="flex items-center">
                                    <i class="fas fa-tag mr-2"></i>
                                    Total Hemat
                                </span>
                                <span class="text-lg">${formatCurrency(order.totalSavings)}</span>
                            </div>
                `;

                if (order.menuDiscountTotal > 0 || order.discount > 0) {
                    html += `<div class="space-y-1 text-sm">`;

                    if (order.menuDiscountTotal > 0) {
                        html += `
                            <div class="flex justify-between text-green-600">
                                <span class="pl-4">• Diskon Menu:</span>
                                <span>${formatCurrency(order.menuDiscountTotal)}</span>
                            </div>
                        `;
                    }

                    if (order.discount > 0) {
                        html += `
                            <div class="flex justify-between text-green-600">
                                <span class="pl-4">• Diskon Order:</span>
                                <span>${formatCurrency(order.discount)}</span>
                            </div>
                        `;
                    }

                    html += `</div>`;
                }

                html += `</div>`;
            }

            html += `
                        <div class="flex justify-between">
                            <span>Subtotal:</span>
                            <span>${formatCurrency(order.subtotal)}</span>
                        </div>
                        <div class="flex justify-between">
                            <span>PPN (11%):</span>
                            <span>${formatCurrency(order.ppn)}</span>
                        </div>
                        <div class="flex justify-between font-bold text-lg border-t pt-2 bg-gray-50 px-2 py-2 rounded">
                            <span>Total Bayar:</span>
                            <span class="text-blue-600">${formatCurrency(order.total)}</span>
                        </div>
                    </div>
                </div>
            `;

            content.innerHTML = html;
        }

        function hideOrderDetailModal() {
            document.getElementById('orderDetailModal').classList.add('hidden');
            document.getElementById('orderDetailModal').classList.remove('flex');
        }

        // FUNCTION PRINT RECEIPT - INI YANG PENTING!
        function printReceipt(orderId) {
            if (!orderId) {
                showNotification('Order ID tidak valid', 'error');
                return;
            }

            console.log('Printing receipt for order ID:', orderId);

            // Buka window baru untuk print
            const printWindow = window.open(
                `/Receipt/Print?orderId=${orderId}`,
                '_blank',
                'width=400,height=700,menubar=no,toolbar=no,location=no,status=no'
            );

            if (!printWindow) {
                showNotification('Popup diblokir! Silakan izinkan popup untuk mencetak struk', 'warning');
            } else {
                showNotification('Membuka halaman cetak...', 'info', 1500);
            }
        }

        function showLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.remove('hidden');
                overlay.classList.add('flex');
            }
        }

        function hideLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.add('hidden');
                overlay.classList.remove('flex');
            }
        }

        function showNotification(message, type = 'info', duration = 3000) {
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => notification.remove());

            const notification = document.createElement('div');
            notification.className = `notification fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;

            let bgColor, textColor, icon;
            switch (type) {
                case 'success':
                    bgColor = 'bg-green-500';
                    textColor = 'text-white';
                    icon = 'fas fa-check-circle';
                    break;
                case 'error':
                    bgColor = 'bg-red-500';
                    textColor = 'text-white';
                    icon = 'fas fa-exclamation-circle';
                    break;
                case 'warning':
                    bgColor = 'bg-yellow-500';
                    textColor = 'text-white';
                    icon = 'fas fa-exclamation-triangle';
                    break;
                default:
                    bgColor = 'bg-blue-500';
                    textColor = 'text-white';
                    icon = 'fas fa-info-circle';
            }

            notification.className += ` ${bgColor} ${textColor}`;
            notification.innerHTML = `
                <div class="flex items-center space-x-2">
                    <i class="${icon}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 10);

            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, duration);
        }

        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        document.addEventListener('click', function(e) {
            const orderDetailModal = document.getElementById('orderDetailModal');
            if (e.target === orderDetailModal) {
                hideOrderDetailModal();
            }
        });

        document.addEventListener('keydown', function(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.tagName === 'SELECT') {
                return;
            }

            switch (e.key) {
                case 'Escape':
                    e.preventDefault();
                    hideOrderDetailModal();
                    break;
                case 'r':
                case 'R':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        loadOrderReports();
                    }
                    break;
            }
        });
    </script>
}

@{
    @Html.AntiForgeryToken()
}